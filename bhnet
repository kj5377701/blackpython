import socket
import sys
import getopt
import threading
import subprocess
import string

listen = False
command = False
upload = False
execute = ''
target = ''
upload_destination = ''
port = 0




def usage():
    print("BHP Net Tool")
    print()
    print("how to use: bhpnet.py -t target_host -p port")
    print('-i --listen')
    print('-e --execute = file_to_run')
    print('-c --command')
    print('-u --upload = destination')
    sys.exit(0)


def client_sender(buffer):
    client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    try:
        client.connect((target, port))
        if len(buffer):
                client.send(bytes(buffer))

        while 1:
            recv_len = 1
            response = ''

            while recv_len:
                data = client.recv(4096)
                recv_len = len(data)
                response += str(data)
                if recv_len < 4096:
                    break
            print(response)
            buffer = input('')
            buffer += '\n'
            client.send(bytes(buffer))
    except:
        print('exception exiting')
        client.close()


def server_loop():
    global target

    if not len(target):
        target = '0.0.0.0'

    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server.bind((target, port))
    server.listen(5)

    while 1:
        client_socket, addr = server.accept()
        client_thread = threading.Thread(target=client_handler, args=(client_socket, ))
        client_thread.start()


def run_command(command):
    command = command.string.rstrip()
    try:
        output = subprocess.check_output(command, stderr=subporcess.STDOUT, shell=True)
    except:
        out_put = 'fall'
    return output


def client_handler(client_socket):
    global upload
    global execute
    global command

    if len(upload_destination):
        file_buffer = ''

        while 1:
            data = client_socket.recv(1024)

            if not data:
                break
            else:
                file_buffer += data
        try:
            file_descriptor = open(upload, 'wb')
            file_descriptor.write(file_buffer)
            file_descriptor.close()

            client_socket.send(b'success save file to: ', bytes(upload_destination))
        except:
            client_socket.send(b'fail')

    if len(execute):
        output = run_command(execute)
        client_socket.send(bytes(output))

    if command:
        while 1:
            client_socket.send(b'<BHP:#>')
            cmd_buffer = ''
            while '\n' not in cmd_buffer:
                cmd_buffer += client_socket.recv(1024)
                response = run_command(cmd_buffer)
                client_socket.send(response)


def main():
    global listen
    global port
    global execute
    global command
    global upload_destination
    global target

    if not len(sys.argv[1:]):
        usage()
    try:
        opts, args = getopt.getopt(sys.argv[1:], 'hle:t:p:cu', ['help', 'listen', 'execute', 'target', 'port', 'command', 'upload'])
    except getopt.GetoptError() as err:
        print(str(err))
        usage()

    for o, a in opts:
        if o in ('-h', '--help'):
            usage()
        elif o in ('-l', '--listen'):
            listen = True
        elif o in ('-e', '--execute'):
            execute = a
        elif o in ('-c', '--commandshell'):
            command = True
        elif o in ('-u', '--upload'):
            upload_destination = a
        elif o in ('t', '--target'):
            target = a
        elif o in ('-p', '--port'):
            port = int(a)
        else:
            assert False, 'no option'
        if not listen and len(target) and port > 0:
            buffer = sys.stdin.read()
            client_sender(buffer)
        if listen:
            server_loop()


main()
